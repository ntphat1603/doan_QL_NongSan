using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DTO;
using BUS;
using System.Security.Cryptography;

namespace GUI
{
    public partial class frm_NhanVien_NS : DevExpress.XtraEditors.XtraForm
    {
        public frm_NhanVien_NS()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            phanquyenTableAdapter1.Fill(qL_NONG_SANDataSet11.phanquyen);
        }

        private void frm_NhanVien_NS_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'qL_NONG_SANDataSet1.nhanvien' table. You can move, or remove it, as needed.
            
            HienThiDSNhanVienLenDatagrid();
            HienThiPhanQuyenLenCombobox();
        }
        private void HienThiDSNhanVienLenDatagrid()
        {
            this.nhanvienTableAdapter.Fill(this.qL_NONG_SANDataSet1.nhanvien);

        }
        private void HienThiPhanQuyenLenCombobox()
        {
            List<NS_PhanQuyen_DTO> lstPhanQuyen = NS_PhanQuyen_BUS.LayDSPhanQuyen();
            cboQuyen.Properties.DataSource = lstPhanQuyen;
            cboQuyen.Properties.DisplayMember = "STenPQ";
            cboQuyen.Properties.ValueMember = "SMaPQ";
        }

        MD5 md = MD5.Create();
        private void btn_them_Click(object sender, EventArgs e)
        {
            // Kiểm tra dữ liệu có bị bỏ trống              
            if (txtMaNV.Text == "" || txtSDT.Text == "" || txtTen.Text == "")
            {
                MessageBox.Show("Vui lòng nhập đầy đủ dữ liệu!");
                return;
            }
            // Kiểm tra mã nhân viên có độ dài chuỗi hợp lệ hay không             
            if (txtMaNV.Text.Length > 5)
            {
                MessageBox.Show("Mã nhân viên tối đa 5 ký tự!");
                return;
            }             // Kiểm tra mã nhân viên có bị trùng không             
            if (NS_NhanVien_BUS.TimNhanVienTheoMa(txtMaNV.Text) != null)
            {
                MessageBox.Show("Mã nhân viên đã tồn tại!");
                return;
            }
            
            DateTime aDateTime = DateTime.Now;
            DateTime y2K = DateTime.Parse(dtpNgaySinh.Text);
            TimeSpan nam = aDateTime - y2K;
            int tong = nam.Days;
            if (tong < 6753)
            {
                MessageBox.Show("Chưa đủ 18 tuổi. Vui lòng kiểm tra lại!");
                return;
            }

            NS_NhanVien_DTO nv = new NS_NhanVien_DTO();
            nv.SMaNV = txtMaNV.Text;
            nv.STen = txtTen.Text;

            if (radNam.Checked == true)
            {
                nv.SPhai = "Nam";
            }
            else
            {
                nv.SPhai = "Nữ";

            }
            nv.DtNgaySinh = DateTime.Parse(dtpNgaySinh.Text);
            nv.SSDT = txtSDT.Text;
            nv.SDiachi = txtDiachi.Text;
            nv.SQuyen = cboQuyen.Text;

            // Convert the input string to a byte array and compute the hash.
            byte[] data = md.ComputeHash(Encoding.UTF8.GetBytes(txtMatkhau.Text));
            // Create a new Stringbuilder to collect the bytes
            // and create a string.
            StringBuilder sBuilder = new StringBuilder();
            // Loop through each byte of the hashed data 
            // and format each one as a hexadecimal string.
            for (int i = 0; i < data.Length; i++)
            {
                sBuilder.Append(data[i].ToString("x2"));
            }
            nv.SMatkhau = sBuilder.ToString();


            if (NS_NhanVien_BUS.ThemNhanVien(nv) == false)
            {
                MessageBox.Show("Không thêm được.");
                return;
            }
            HienThiDSNhanVienLenDatagrid();
            MessageBox.Show("Đã thêm nhân viên.");
        }

        private void btn_sua_Click(object sender, EventArgs e)
        {
            if (txtMaNV.Text == "" || txtSDT.Text == "" || txtTen.Text == "")
            {
                MessageBox.Show("Vui lòng nhập đầy đủ dữ liệu!");
                return;
            }
            // Kiểm tra mã nhân viên có độ dài chuỗi hợp lệ hay không             
            if (txtMaNV.Text.Length > 5)
            {
                MessageBox.Show("Mã nhân viên tối đa 5 ký tự!");
                return;
            }

            DateTime aDateTime = DateTime.Now;
            DateTime y2K = DateTime.Parse(dtpNgaySinh.Text);
            TimeSpan nam = aDateTime - y2K;
            int tong = nam.Days;
            if (tong < 6753)
            {
                MessageBox.Show("Chưa đủ 18 tuổi. Vui lòng kiểm tra lại!");
                return;
            }

            NS_NhanVien_DTO nv = new NS_NhanVien_DTO();
            nv.SMaNV = txtMaNV.Text;
            nv.STen = txtTen.Text;

            if (radNam.Checked == true)
            {
                nv.SPhai = "Nam";
            }
            else
            {
                nv.SPhai = "Nữ";

            }
            nv.DtNgaySinh = DateTime.Parse(dtpNgaySinh.Text);
            nv.SSDT = txtSDT.Text;
            nv.SDiachi = txtDiachi.Text;
            nv.SQuyen = cboQuyen.Text;
            // Convert the input string to a byte array and compute the hash.
            byte[] data = md.ComputeHash(Encoding.UTF8.GetBytes(txtMatkhau.Text));
            // Create a new Stringbuilder to collect the bytes
            // and create a string.
            StringBuilder sBuilder = new StringBuilder();
            // Loop through each byte of the hashed data 
            // and format each one as a hexadecimal string.
            for (int i = 0; i < data.Length; i++)
            {
                sBuilder.Append(data[i].ToString("x2"));
            }
            nv.SMatkhau = sBuilder.ToString();

            if (NS_NhanVien_BUS.SuaNhanVien(nv) == false)
            {
                MessageBox.Show("Không thêm được.");
                return;
            }
            HienThiDSNhanVienLenDatagrid();
            MessageBox.Show("Đã thêm nhân viên.");
        }

        private void btn_xoa_Click(object sender, EventArgs e)
        {
            NS_NhanVien_DTO nv = new NS_NhanVien_DTO();
            nv.SMaNV = txtMaNV.Text;
            if (NS_NhanVien_BUS.XoaNhanVien(nv) == false)
            {
                MessageBox.Show("Không Xóa được.");
                return;
            }
            HienThiDSNhanVienLenDatagrid();
            MessageBox.Show("Đã Xóa nhân viên.");
        }

        private void gridControl1_Click(object sender, EventArgs e)
        {
            txtMaNV.Text = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[0]).ToString();
            txtTen.Text = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[1]).ToString();
            if (gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[2]).ToString() == "Nam")
            {
                radNam.Checked = true;
            }
            else
            {
                radNu.Checked = true;
            }
            dtpNgaySinh.Text = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[3]).ToString();
            txtSDT.Text = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[4]).ToString();
            txtDiachi.Text = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[5]).ToString();
            cboQuyen.EditValue = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[6]).ToString();
        }

        private void txtSDT_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (((e.KeyChar >= '0') && (e.KeyChar <= '9')) || (Convert.ToInt32(e.KeyChar) == 8))
                e.Handled = false;
            else e.Handled = true;
        }
    }
}